name: Go Release

on:
  push:
    tags:
      - 'v*.*.*'  # 触发工作流的标签

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.20.x]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build
        run: |
          mkdir -p build/${{ matrix.os }}
          GOOS=${{ matrix.os == 'ubuntu-latest' && 'linux' || (matrix.os == 'macos-latest' && 'darwin' || 'windows') }}
          GOARCH=amd64
          OUTPUT_NAME=myapp
          if [ "${GOOS}" = "windows" ]; then
            OUTPUT_NAME=${OUTPUT_NAME}.exe
          fi
          go mod tidy
          go build -o build/${{ matrix.os }}/${OUTPUT_NAME}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-binary
          path: build/${{ matrix.os }}/

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-binary
          path: ./build/linux
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-binary
          path: ./build/darwin
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-binary
          path: ./build/windows

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release notes for ${{ github.ref }}.
          draft: false
          prerelease: false
          # token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/linux/myapp
          asset_name: myapp-linux
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/darwin/myapp
          asset_name: myapp-macos
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/windows/myapp.exe
          asset_name: myapp-windows.exe
          asset_content_type: application/octet-stream